find out the possible positions with a people in front and b people behind in a line of n people.
You are given integers n, a and b. You are standing in a line of n people. You don't know which position you're in, but you know there are at least a people in front of you and at most b people behind you.
Return the number of possible positions you could be in.

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a=sc.nextInt();
        int b=sc.nextInt(); 
        System.out.print(findPosition(n, a, b));
    }
    static int findPosition(int n, int a, int b)
    {
    return n - Math.max(a + 1, n - b) + 1;
    } 
}

Given a number N, check whether the number is an Phoenix number or not.
A number is called Phoenix number if and only if its square ends in the same digits as the number itself.
Input: N = 76
Output: Phoenix number
Explanation:
76^2 = 5776 which ends with 76 therefore it is an Phoenix number.

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) { 
        Scanner sc=new Scanner(System.in);
        int N=sc.nextInt();
        System.out.println(isPhoenix(N) ? "Phoenix number" : "Not a phoenix number.");

    }
    static boolean isPhoneix(int N)
    {
        int sq = N * N;
        while (N > 0) {
            if (N % 10 != sq % 10)
                return false;
            N /= 10;
            sq /= 10;
        }
        return true;
    }
}


Given two arrays a[] and b[] of size n and m respectively. The task is to find union between these two arrays.
Union of the two arrays can be defined as the set containing distinct elements from both the arrays. If there are repetitions, then only one occurrence of element should be printed in the union.
print the length of the new array.

import java.io.*;
import java.util.*;
import java.util.Arrays;
import java.util.HashSet;

public class Solution {

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int m=sc.nextInt();
        HashSet<Integer> union = new HashSet<>();
        for(int i=0;i<n;i++){
            int temp = sc.nextInt();
            union.add(temp);
        }
        for(int i=0;i<m;i++){
            int temp=sc.nextInt();
            union.add(temp);
        }
        System.out.println(union.size());
    }
}
